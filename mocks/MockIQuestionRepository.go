// Code generated by MockGen. DO NOT EDIT.
// Source: dal/IQuestionRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "pollp/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIQuestionRepository is a mock of IQuestionRepository interface.
type MockIQuestionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIQuestionRepositoryMockRecorder
}

// MockIQuestionRepositoryMockRecorder is the mock recorder for MockIQuestionRepository.
type MockIQuestionRepositoryMockRecorder struct {
	mock *MockIQuestionRepository
}

// NewMockIQuestionRepository creates a new mock instance.
func NewMockIQuestionRepository(ctrl *gomock.Controller) *MockIQuestionRepository {
	mock := &MockIQuestionRepository{ctrl: ctrl}
	mock.recorder = &MockIQuestionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuestionRepository) EXPECT() *MockIQuestionRepositoryMockRecorder {
	return m.recorder
}

// AddVote mocks base method.
func (m *MockIQuestionRepository) AddVote(questionId, answerId string) (models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVote", questionId, answerId)
	ret0, _ := ret[0].(models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVote indicates an expected call of AddVote.
func (mr *MockIQuestionRepositoryMockRecorder) AddVote(questionId, answerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVote", reflect.TypeOf((*MockIQuestionRepository)(nil).AddVote), questionId, answerId)
}

// CreateQuestion mocks base method.
func (m *MockIQuestionRepository) CreateQuestion(question models.Question) (models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", question)
	ret0, _ := ret[0].(models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockIQuestionRepositoryMockRecorder) CreateQuestion(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockIQuestionRepository)(nil).CreateQuestion), question)
}

// GetQuestion mocks base method.
func (m *MockIQuestionRepository) GetQuestion(id string) (models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestion", id)
	ret0, _ := ret[0].(models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestion indicates an expected call of GetQuestion.
func (mr *MockIQuestionRepositoryMockRecorder) GetQuestion(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestion", reflect.TypeOf((*MockIQuestionRepository)(nil).GetQuestion), id)
}

// GetQuestions mocks base method.
func (m *MockIQuestionRepository) GetQuestions() []models.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions")
	ret0, _ := ret[0].([]models.Question)
	return ret0
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockIQuestionRepositoryMockRecorder) GetQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockIQuestionRepository)(nil).GetQuestions))
}

// RemoveVote mocks base method.
func (m *MockIQuestionRepository) RemoveVote(questionId, answerId string) (models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVote", questionId, answerId)
	ret0, _ := ret[0].(models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVote indicates an expected call of RemoveVote.
func (mr *MockIQuestionRepositoryMockRecorder) RemoveVote(questionId, answerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVote", reflect.TypeOf((*MockIQuestionRepository)(nil).RemoveVote), questionId, answerId)
}
